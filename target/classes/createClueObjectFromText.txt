/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

package com.example.crack.the.code;

import java.io.File;
import java.lang.reflect.Array;

/**
 *
 * @author danie
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.*;

public class createClueObjectFromText {

    private static Logger logger = Logger.getLogger(createClueObjectFromText.class.getName());

    Boolean all = false;
    Boolean nothing = false;
    Util util = new Util(logger);

    String hintMessage;

    /*
     * This class will take in a string and create a clue object from it.
     * 
     * the challlenge is that the string might be in a few formats. 
     * examples of formats and what should be created from them:
     
     test case 1:
     given string: 9, 2, 8, 5 one number is correct but wrong placed
     expected clue object can be created using this code (builder pattern):
        Clue clue = new Clue.Builder()
                    .combination(Arrays.asList(9, 2, 8, 5))
                    .hintMessage("one number is correct but wrong placed")
                    .correctDigits(1)
                    .wellPlacedDigits(0)
                    .incorrectlyPlacedDigits(1)
                    .build();

        test case 2:
        given string: 0 1 2 3 One number is correct and well placed
        expected clue object can be created using this code (builder pattern):
        Clue clue = new Clue.Builder()
                    .combination(Arrays.asList(0, 1, 2, 3))
                    .hintMessage("One number is correct and well placed")
                    .correctDigits(1)
                    .wellPlacedDigits(1)
                    .incorrectlyPlacedDigits(0)
                    .build();

        test case 3:
        given string: 1 3 2 0 one number is correct but wrongly placed
        expected clue object can be created using this code (builder pattern):
        Clue clue = new Clue.Builder()
                    .combination(Arrays.asList(1, 3, 2, 0))
                    .hintMessage("one number is correct but wrongly placed")
                    .correctDigits(1)
                    .wellPlacedDigits(0)
                    .incorrectlyPlacedDigits(1)
                    .build();

        test case 4:
        given string: 0 0 0 0 nothing is correct
        expected clue object can be created using this code (builder pattern):
        Clue clue = new Clue.Builder()
                    .combination(Arrays.asList(0, 0, 0, 0))
                    .hintMessage("nothing is correct")
                    .correctDigits(0)
                    .wellPlacedDigits(0)
                    .incorrectlyPlacedDigits(0)
                    .build();

        test case 5:
        given string: 0 6 7 2 numbers are correct but wrong placed
        expected clue object can be created using this code (builder pattern):
        Clue clue = new Clue.Builder()
                    .combination(Arrays.asList(0, 6, 7))
                    .hintMessage("2 numbers are correct but wrong placed")
                    .correctDigits(2)
                    .wellPlacedDigits(0)
                    .incorrectlyPlacedDigits(2)
                    .build();

        
        in order to attempt and deal with probmems like test case 5, we will check and if the first word is number or numbers the digit before it will be part of the hint message



     */
    public Clue createClueObjectFromText(String clueString) {

        if (clueString == null || clueString.isEmpty()) {
         //   return;
         return null;
        }

        clueString = clueString.toLowerCase();

        //TODO: if we are writing numbers as words, we can try to assume that the digits would all be part of the combination.
        // i think if 3 digits are present written as words, then we can assume that the digits (numbers as digits) would be part of the combination
        // figure out what is the separator for the combination
        // the separator is all the characters from the first character that is not a number to the character before the next number
        boolean foundFirstNum = false;
        String combinationSeparator = "";
        for (int i = 0; i < clueString.length(); i++) {
            if (!Character.isDigit(clueString.charAt(i))) {
                combinationSeparator += clueString.charAt(i);
                System.out.println("combinationSeparatorscan: " + combinationSeparator);
            } else if (foundFirstNum) {
                break;
            } else {
                foundFirstNum = true;
            }
        }

        // check if all or nothing is present in the string
        checkIfAllOrNothing(clueString);

        if (all || nothing) {
            // if any more number 

            // check if any digts are present in the message
            String comboStrring = "";
            if (all) {
                comboStrring = clueString.substring(0, clueString.indexOf("all"));
                // set hint message - begin when the word "all" starts (from the a in all to the end of the string)
                hintMessage = clueString.substring(clueString.indexOf("all"));

            } else if (nothing) {
                comboStrring = clueString.substring(0, clueString.indexOf("nothing"));
                // set hint message - begin when the word "nothing" starts (from the n in nothing to the end of the string)
                hintMessage = clueString.substring(clueString.indexOf("nothing"));

            }

            // get all digits from the string
            ArrayList<Integer> digits = new ArrayList<Integer>();

            for (int i = 0; i < comboStrring.length(); i++) {
                if (Character.isDigit(comboStrring.charAt(i))) {
                    digits.add(Integer.parseInt(comboStrring.charAt(i) + ""));
                }
            }

            System.out.println("digits: " + digits);

            // need to implement a logic to deal with digits being present in the message that arent equal to the number of digits in the combination
            // ex - all number are correct, but 2 are well placed
            // becuse didnt implement this logic, check if there is a digit in the message that is not equal to the number of digits in the combination
            // if more than 1 digit is present in the message, we know it's wrong anyway
            if (util.getDigits(hintMessage).size() > 1) {
                throw new IllegalArgumentException("ERROR: more than 1 digit is present in the message");
            } else if (util.getDigits(hintMessage).size() == 1 && util.getDigits(hintMessage).containsKey(digits.size())) {
                // in this case, we know that the number of digits in the message is equal to the number of digits in the combination so just 
                // print some warning message
                logger.warning("Warning: the number of digits in the message is equal to the number of digits in the combination");
            }
            // print message
            System.out.println("hintMessage: " + hintMessage);

            // now if it's noghting make sure it's says nothing is correct, if so then we can just return a clue object and if not throw an error
            if (nothing) {

                if (hintMessage.equals("nothing is correct")) {
                    return new Clue.Builder()
                            .combination(digits)
                            .hintMessage(hintMessage)
                            .correctDigits(0)
                            .wellPlacedDigits(0)
                            .incorrectlyPlacedDigits(0)
                            .build();
                } else {
                    throw new IllegalArgumentException("ERROR: hint message is not nothing is correct. hint message: " + hintMessage);
                }
            }

            if (all) {

                // if it's first say somthign like all numbers are correct and then later somthing like but and wrong placed, then we can just return a clue object and if not throw an error
                boolean containsCorrectVariation = hintMessage.contains("correct");

                boolean containsWrongPlacedVariation = hintMessage.contains("wrong") || hintMessage.contains("wrongly") || hintMessage.contains("incorrectly");

                String OGHintMessage = hintMessage;

                if (containsCorrectVariation && containsWrongPlacedVariation) {
                    // make sure that the correct is not the correct inside of incorrectly
                    ArrayList<Integer> correctVariationIndex = new ArrayList<Integer>();
                    // get all the indexes of the word correct & correctly
                    Integer index = hintMessage.indexOf("correct");
                    while (index >= 0) {
                        correctVariationIndex.add(index);
                        index = hintMessage.indexOf("correct", index + 1);
                    }

                    // get all the indexes of the word correctly
                    index = hintMessage.indexOf("correctly");
                    while (index >= 0) {
                        correctVariationIndex.add(index);
                        index = hintMessage.indexOf("correctly", index + 1);
                    }

                    Integer validCorrect = 0;
                    Integer validIncorrect = 0;

                    // can try to check by checking if there is a space before and after the word correct 
                    // (or space before and after the word correctly and then a space). code:
                    // check those indexes to see if there is a space before and after the word correct
                    Iterator<Integer> iterator = correctVariationIndex.iterator();

                    while (iterator.hasNext()) {
                        index = iterator.next(); // index is the index of the word correct or correctly in the hint message
                        // cehck if index before is a space
                        if (index == 0) {
                            // if index is 0, then there is no space before the word correct or correctly
                            if (index + "correct".length() == hintMessage.length()) {
                                validCorrect++;
                                // if no space after the word correct, then remove it
                                iterator.remove();
                            } else if (index + "correct".length() < hintMessage.length() && hintMessage.charAt(index + "correct".length()) == ' ') {
                                validCorrect++;
                                // if there is a space after the word correct and it's the end of the string, then remove it
                                iterator.remove();
                            } // check if there is a space after the word correctly
                            else if (index + "correctly".length() == hintMessage.length()) {
                                validCorrect++;
                                // if no space after the word correctly and it's the end of the string, then remove it
                                iterator.remove();

                            } else if (index + "correctly".length() < hintMessage.length() && hintMessage.charAt(index + "correctly".length()) == ' ') {
                                validCorrect++;
                                // if there is a space after the word correctly, then remove it
                                iterator.remove();

                            } else {
                                // here thats not a correct variation so it wont be removed now.
                                 System.out.println("TODO - did not know what to do here so i will just add a issue with stepzies");
                               // issue title: incorrect hint message
                                 /*issue body/description:
                                  the problem is it found the word correct or correctly, but it's not a correct variation
                                  and honestly i can't think of a way to deal with this, so i will just add a issue with stepzies
                                  
                                  */

                            }

                        }

                        if (index > 0 && hintMessage.charAt(index - 1) == ' ') {
                            // now chceck if at the end of the words it's a space 
                            // check if index after is a space when the word is correct
                            if (index + "correct".length() == hintMessage.length()) {
                                // if no space after the word correct, then remove it
                                iterator.remove();
                            } else if (index + "correct".length() < hintMessage.length() && hintMessage.charAt(index + "correct".length()) == ' ') {
                                // if there is a space after the word correct and it's the end of the string, then remove it
                                iterator.remove();
                            } // check if there is a space after the word correctly
                            else if (index + "correctly".length() == hintMessage.length()) {
                                // if no space after the word correctly and it's the end of the string, then remove it
                                iterator.remove();

                            } else if (index + "correctly".length() < hintMessage.length() && hintMessage.charAt(index + "correctly".length()) == ' ') {
                                // if there is a space after the word correctly, then remove it
                                iterator.remove();

                            } else {
                                // here thats not a correct variation so we cannot remove it now, at the

                               System.out.println("TODO - did not know what to do here so i will just add a issue with stepzies");
                               // issue title: incorrect hint message
                                 /*issue body/description:
                                  the problem is it found the word correct or correctly, but it's not a correct variation
                                  and honestly i can't think of a way to deal with this, so i will just add a issue with stepzies
                                  
                                  */
                                  


                            }

                        } else{
                            // cehck if the word is incorrectly
                            if (index + "incorrectly".length() == hintMessage.length()) {
                                // if no space after the word incorrectly, then remove it
                                iterator.remove();
                            } else if (index + "incorrectly".length() < hintMessage.length() && hintMessage.charAt(index + "incorrectly".length()) == ' ') {
                                // if there is a space after the word incorrectly and it's the end of the string, then remove it
                                iterator.remove();
                            } else {
                                // here thats not a correct variation so we cannot remove it

                            }


                        }



                        // if all wrong and correct is true somthing is wrong. 
                        // since i can't really think what to do in this case, i will just add a issue with stepzies

                        // issue title: incorrect hint message
                        /*issue body/description:
                    the problem is it did mark the hint message as incorrect, but it did not mark the stepzies as incorrect
                        

                         */
                    }


                }

                boolean containsWellPlacedVariation = hintMessage.contains("well placed");
                boolean containsBut = hintMessage.contains("but");
                boolean containsAnd = hintMessage.contains("and");

            }

        } else {

            System.out.print("combinationSeparator: " + combinationSeparator);
            // if space is the separator, then print (space)
            if (combinationSeparator.equals(" ")) {
                System.out.println("(space)");
            } else {
                System.out.println();
            }

            Scanner scanner = new Scanner(clueString);
            scanner.useDelimiter(combinationSeparator);
            List<Integer> combination = new ArrayList<>();
            while (scanner.hasNextInt()) {
                combination.add(scanner.nextInt());

            }

            // first index of the last number of the combination
            Integer lastNum = combination.get(combination.size() - 1);
            int indexLastNumCombo = clueString.indexOf(lastNum.toString());

            String hintMessage = clueString.substring(indexLastNumCombo + lastNum.toString().length() + 1);

            // if first character of hint message is a space, remove it
            if (hintMessage.charAt(0) == ' ') {
                hintMessage = hintMessage.substring(1);
            }

            System.out.println("hintMessage: " + hintMessage);

            // now if the first character of the hint message is a not a letter or a number try reseting and using the seperator of the combination as the seperator for the hint message
            if (!Character.isLetter(hintMessage.charAt(0)) && !Character.isDigit(hintMessage.charAt(0))) {

                scanner = new Scanner(clueString);
                scanner.useDelimiter(combinationSeparator);
                combination = new ArrayList<>();
                while (scanner.hasNextInt()) {
                    combination.add(scanner.nextInt());
                }

                // first index of the last number of the combination
                lastNum = combination.get(combination.size() - 1);
                indexLastNumCombo = clueString.indexOf(lastNum.toString());

                hintMessage = clueString.substring(indexLastNumCombo + lastNum.toString().length() + 1);

                // if first character of hint message is a space, remove it
                if (hintMessage.charAt(0) == ' ') {
                    hintMessage = hintMessage.substring(1);
                }

                // now if the first character of the hint message is a not a letter or a number print an error message
                if (!Character.isLetter(hintMessage.charAt(0)) && !Character.isDigit(hintMessage.charAt(0))) {
                    throw new IllegalArgumentException("ERROR: first character of hint message is not a letter or a number");
                }
            }

            // now we will need to check if the hint message has either:
            // "all"
            // "nothing"
            // any number (words - one, two, three, four, five, six, seven, eight, nine)
            // any number (digits - 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
            // if it does, then we will use the last number of the combination as the number of correct digits (regardless of whether it is well placed or not)
            checkIfAllOrNothing(hintMessage);

            // if both all and nothing are false, then we will check if any number (words - one, two, three, four, five, six, seven, eight, nine) appears in the hint message
            if (!(all || nothing)) {

                System.out.println("hintMessage: " + hintMessage);
                // convert all numbers as words to numbers as digits using the Util class.

                hintMessage = util.convertNumbersToDigits(hintMessage);

                //  how many times a number any number (words - one, two, three, four, five, six, seven, eight, nine) appears in the hint message
                int numDigits = 0;

                ArrayList<Integer> digitsInHintMessage = new ArrayList<Integer>();

                // split the string into words - to avoid getting numbers that are 2 digits long (like 25) and counting them as 2 digits
                String[] words = clueString.split(" ");
                for (String word : words) {
                    try {
                        Integer num = Integer.parseInt(word);
                        if (num != null) {
                            numDigits++;
                            digitsInHintMessage.add(num);
                        }
                    } catch (NumberFormatException e) {
                        // do nothing
                    }
                }

                System.out.println("numDigits: " + numDigits);
                System.out.println("digitsInHintMessage: " + digitsInHintMessage);

            }

        }
        return null;

    }

    private void checkIfAllOrNothing(String clueString) {

        if (clueString.contains("all")) {
            all = true;

        } else if (clueString.contains("nothing")) {
            nothing = true;
        }

    }

    // testing 
    public static void main(String[] args) {
        createClueObjectFromText createClueObjectFromText = new createClueObjectFromText();
        // createClueObjectFromText.createClueObjectFromText("9, 2, 8, 5 one number is correct but wrong placed");
        // createClueObjectFromText.createClueObjectFromText("0 1 2 3 One number is correct and well placed");
        // createClueObjectFromText.createClueObjectFromText("1 3 2 0 one number is correct but wrongly placed");
        // createClueObjectFromText.createClueObjectFromText("0 0 0 0 nothing is correct");

    }

}
